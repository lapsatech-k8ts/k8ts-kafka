apiVersion: v1
kind: Service
metadata:
  name: {{ $.Release.Name }}-hs
  labels:
    app: {{ $.Release.Name }}
    svc-type: headless
spec:
  ports:
  - name: server-int
    port: {{ $.Values.app.broker.listener.internal.port.number | int }}
  - name: server-ext
    port: {{ $.Values.app.broker.listener.external.port.number | int }}
  clusterIP: None
  selector:
    app: {{ $.Release.Name }}
    pod-type: broker
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ $.Release.Name }}-broker
  labels:
    app: {{ $.Release.Name }}
    statefulset-type: broker
spec:
  selector:
    matchLabels:
      app: {{ $.Release.Name }}
      pod-type: broker
  serviceName: {{ $.Release.Name }}-hs
  replicas: {{ $.Values.app.brokers.count }}
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: OrderedReady
  template:
    metadata:
      labels:
        app: {{ $.Release.Name }}
        pod-type: broker
    spec:
  {{- if eq $.Values.deployment.antiAffinity "hard"}}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: "app"
                operator: In
                values:
                - {{ $.Release.Name | quote }}
              - key: "pod-type"
                operator: In
                values:
                - "broker"
            topologyKey: "kubernetes.io/hostname"
  {{- else if eq $.Values.deployment.antiAffinity "soft"}}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: "app"
                  operator: In
                  values:
                  - {{ $.Release.Name | quote }}
                - key: "pod-type"
                  operator: In
                  values:
                  - "broker"
              topologyKey: "kubernetes.io/hostname"
  {{- end}}
      terminationGracePeriodSeconds: {{ $.Values.app.broker.terminationGracePeriodSeconds }}
      containers:
      - name: {{ $.Release.Name }}-borker
        imagePullPolicy: Always
        image: "localhost:5000/lapsatech/kubernetes-kafka_3.6:latest"
        resources:
          limits:
            memory: {{ $.Values.app.broker.limits.memory | quote }}
            cpu: {{ $.Values.app.broker.limits.cpu | quote }}
        ports:
        - name: server-int
          containerPort: {{ $.Values.app.broker.listener.internal.port.number | int }}
        - name: server-ext
          containerPort: {{ $.Values.app.broker.listener.external.port.number | int }}
        env:
        - name: BROKER_INDEX
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['apps.kubernetes.io/pod-index']
        - name: BROKER_INT_PORT
          value: {{ $.Values.app.broker.listener.internal.port.number | quote }}
        - name: BROKER_EXT_ADDRESS_PRINTF
          value: {{ $.Values.app.broker.listener.external.address.printf | quote }}
        - name: BROKER_EXT_PORT
          value: {{ $.Values.app.broker.listener.external.port.number | quote }}
        - name: DATA_DIR
          value: "{{ $.Values.app.broker.storage.mountPath }}/data"
        - name: MEMORY_HEAP
          value: {{ $.Values.app.kafka.heap | quote }}
        - name: LOG_LEVEL
          value: INFO
        - name: "ZOOKEEPER_CONNECT"
          value: "{{ $.Values.zk.svc.host }}:{{ $.Values.zk.svc.port }}/kafka/{{ $.Release.Name }}"
  {{- range $k, $v := $.Values.app.kafka.overrides }}
        - name: "OVERRIDE_{{ $k }}"
          value: {{ $v | quote }}
  {{- end }}
  {{- if $.Values.deployment.probes.readiness.enabled }}
        readinessProbe:
          exec:
            command:
            - kafka-ready.sh
          failureThreshold: 10
          initialDelaySeconds: 10
          periodSeconds: 60
          timeoutSeconds: 30
  {{- end }}
  {{- if $.Values.deployment.probes.liveness.enabled }}
        livenessProbe:
          exec:
            command:
            - kafka-ready.sh
          failureThreshold: 10
          initialDelaySeconds: 120
          periodSeconds: 120
          timeoutSeconds: 30
  {{- end }}
        volumeMounts:
        - name: data
          mountPath: {{ $.Values.app.broker.storage.mountPath | quote }}
      volumes:
      - name: templogs
        emptyDir: {}
  {{- if not $.Values.deployment.pvc.enabled }}
      - name: data
        emptyDir: {}
  {{- end }}
  {{- if $.Values.deployment.security.enabled }}
      securityContext:
        fsGroup: {{ $.Values.deployment.security.context.fsGroup }}
        runAsUser: {{ $.Values.deployment.security.context.runAsUser }}
  {{- end }}
  {{- if $.Values.deployment.pvc.enabled }}
  volumeClaimTemplates:
  - metadata:
      name: data
    labels:
      app: {{ $.Release.Name }}
      pvc-type: broker-data
    spec:
      accessModes: {{ $.Values.deployment.pvc.storage.accessModes }}
      resources:
        requests:
          storage: {{ $.Values.deployment.pvc.storage.capacity | quote }}
  {{- end }}
---
{{- if $.Values.deployment.pdb.enabled }}
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: {{ $.Release.Name }}-broker-pdb
  labels:
    app: {{ $.Release.Name }}
spec:
  selector:
    matchLabels:
      app: {{ $.Release.Name }}
      pod-type: broker
  maxUnavailable: {{ $.Values.app.brokers.maxUnavailable }}
---
{{- end }}
{{- if $.Values.deployment.svcExt.enabled }}
  {{- range $nodeIndex := until ( $.Values.app.brokers.count | int ) }}
apiVersion: v1
kind: Service
metadata:
  name: {{ $.Release.Name }}-broker-{{ $nodeIndex }}
  labels:
    app: {{ $.Release.Name }}
    svc-type: per-broker
    node-index: '{{ $nodeIndex }}'
spec:
  ports:
  - name: server-ext
    port: {{ $.Values.app.broker.listener.external.port.number | int }}
  selector:
    app: {{ $.Release.Name }}
    pod-type: broker
    apps.kubernetes.io/pod-index: '{{ $nodeIndex }}'
---
  {{- end }}
{{- end }}
